@{
    ViewData["Title"] = "Dashboard"; 
}

@model Warehouseweb2.Models.OverviewDetailsView;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Test</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Outfit&display=swap" rel="stylesheet">
 
</head>

<body>
@{
    var usage = Model.OverviewDetails.usage; 
    var colorClass = usage switch
    {
        >= 90 => "text-red",       
        >= 75 => "text-orange",    
        >= 40 => "text-green",     
        >= 11 => "text-blue",     
        _ => "text-gray"          
    };
}
    <div class="dashboard-grid">
        <div class="card">
            <h3> 📦 Total Items in Stock</h3>
            <div class="metric-value" id="totalItems"> @String.Format("{0:N0}", Model.OverviewDetails.total) </div>
            <div class="metric-label">all locations</div>
        </div>
     
        <div class="card">
            <h3>📈 Usage </h3>
            <div class="metric-value @colorClass" id="dailyShipments">
                @usage %
            </div>
            <div class="metric-label">Space Consumption</div>
        </div>
                
        <div class="card">
            <h3>⏳ Incoming Stock </h3>
            <div class="metric-value" id="pendingOrders"> @String.Format("{0:N0}", Model.OverviewDetails.incoming) </div>
            <div class="metric-label">Pending Arrival</div>
        </div>
        
        <div class="card">
            <h3>🚚 Outgoing Stock </h3>
            <div class="metric-value" id="efficiency"> @String.Format("{0:N0}", Model.OverviewDetails.outgoing) </div>
            <div class="metric-label">Stock Leaving the Warehouse</thead></div>
        </div>
    </div>
    <div class="card-grid-container1">
        @foreach (var item in Model.Area)
        {
        <div class="stat-card2" data-percentage="high">
            <div class="status-dot2"></div>     
            <div class="card-content2">
                <h4 class="card-title2">Usage Area</h4>
                <div class="card-value2"> @item.usage % </div>
                <p class="card-description2">@item.location_name </p>
            </div>
        </div>
        }
    </div>

    <div class="inventory-table">
        <div class="table-header">📋 Current Inventory Status</div>
        <table>
            <thead>
                <tr style="align-items: center;">
                    <th>Product Category</th>
                    <th>Product Name</th>
                    <th>Current Stock</th>
                    <th>locations</th>
                    <th>Last Updated</th>
                </tr>
            </thead>
            <tbody id="inventoryBody">
                @foreach (var item in Model.Top5Product)
        {
                <tr>
                    <td>@item.category</td>
                    <td>@item.product_name</td>
                    <td>@String.Format("{0:N0}", item.quantity) </td>
                    <td><span class="stock-level stock-high">@item.location_name</span></td>
                    <td>@item.last_update</td>
                </tr>
        }
            </tbody>
        </table>
    </div>

    <div class="last-update-container">
        Last update: <span id="last-update-time" class="last-update-text"></span>
    </div>


    <script>

        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.stat-card2');
            
            cards.forEach(card => {
                const valueElement = card.querySelector('.card-value2');
                const value = parseInt(valueElement.textContent);
                
                if (value >= 90) {
                    card.setAttribute('data-percentage', 'danger');
                } else if (value >= 80) {
                    card.setAttribute('data-percentage', 'high');
                } else if (value >= 40) {
                    card.setAttribute('data-percentage', 'medium');
                } else if (value >= 20) {
                    card.setAttribute('data-percentage', 'low');
                } else {
                    card.setAttribute('data-percentage', 'zero');
                }
            });
                 function updateLastRefreshTime() {
                const now = new Date();
                const options = {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false 
                };
                const formattedTime = now.toLocaleDateString('en-GB', options) + ' ' ;
                document.getElementById('last-update-time').textContent = formattedTime;
            }

       
            updateLastRefreshTime();

         
        });


    </script>
</body>
</html>